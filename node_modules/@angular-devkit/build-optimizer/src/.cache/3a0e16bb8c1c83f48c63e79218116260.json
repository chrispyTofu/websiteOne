{"remainingRequest":"C:\\Users\\Chris\\Desktop\\website again\\website-one\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Chris\\Desktop\\website again\\website-one\\node_modules\\rxjs\\_esm5\\operators\\share.js","dependencies":[{"path":"C:\\Users\\Chris\\Desktop\\website again\\website-one\\node_modules\\rxjs\\_esm5\\operators\\share.js","mtime":1527692605974},{"path":"C:\\Users\\Chris\\Desktop\\website again\\website-one\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1527692569169},{"path":"C:\\Users\\Chris\\Desktop\\website again\\website-one\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1527692574826}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n;\n//# sourceMappingURL=share.js.map\n",null]}